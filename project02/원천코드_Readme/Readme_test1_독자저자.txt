프로그램의 개요는 다음과 같다.

메인 프로세스 내에 독자 스레드 1개와 저자 스레드가 3개 존재하며 이들 스레드는
생성 후 병행으로 동작한다.

reader writer problem의 구현은 교재의 코드를 참고하여 설계하였으며 실질적
구현을 위해 개념과 몇가지 기능을 추가하였다.

동기화 기능은 2가지 semapore를 활용하여 하나는 mutex로 동작하도록 하고 
하나는 세마포로써 기능하게 하여 reader writer 문제를 해결하였다.
(wrt 와 mutex로 나누어 reader writer를 해결하는것은 교재를 참고함)

프로그램의 동작은 별도의 입력 없이 ./test2 와 ./error2 의
명령어로 동작 가능하다. 

사용되는 변수에 대하여 설명하자면 다음과 같다.
@sem_t wrt, mutex : 위에서 설명한 wrt세마포와 mutex이다

@read_count : 교재코드에서의 readcount 변수와 활용이 일치하며 reader 스레드가
	      wait(&wrt)와 signal(&write)에 해당하는 연산을 하기 위한 조건으로써
	      쓰이는 변수이다.

@MAX_READER: 생성할 reader 스레드의 수를 말한다. 프로그램에선 3개로 제한했다 

@MAX_NOTE_PAGE: writer 스레드가 작성할 총 변수의 갯수를 말한다. 프로그램에선
		10개로 제한했으며 작성할 때 마다 변수값에 1을 입력한다.

@written_page : writer 스레드가 작성을 완료한 페이지 수를 의미한다.

@note[MAX_NOTE_PAGE] : MAX_NOTE_PAGE만큼의 페이지를 가진 노트이다.
		         미작성시 0 작성시 1 이라고 약속한다.


마지막으로 배경을 간단하게 요약하자면 다음과 같다.

1. 페이지가 10페이지인 노트에서 writer와  reader가 동시에 작업을 하게 된다.

2. reader와 writer는 세마포에 의해서 상호배타적으로 동작하게 된다. 

3. writer는 2초 에 1페이지씩 노트를 작성하며 reader는 1초에 1번씩 노트를 확인한다.

4. reader가 노트를 확인하면 총 몇번째 페이지까지 읽었는지 출력하고, 그동안 읽은
   내용도 출력하게 된다.

5. writer는 총 10페이지의 노트를 모두 작성하게되면 프로그램이 종료된다.
